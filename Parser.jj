PARSER_BEGIN(Parser)

import java.io.*;
import java.util.*;

public class Parser { }

PARSER_END(Parser)

SKIP :
{
  " "
  | "\t"
  | "\n"
}

TOKEN :
{
  < EL       : ";;\n"   >
  | < DECL   : "let"   >
  | < FUN    : "fun"    >
  | < IN     : "in"     >
  | < END    : "end"    >
  | < COMM   : ","      >
  | < PLUS   : "+"      >
  | < MINUS  : "-"      >
  | < TIMES  : "*"      >
  | < DIV    : "/"      >
  | < LPAR   : "("      >
  | < RPAR   : ")"      >
  | < COL    : ":"      >
  | < AT     : "@"      >
  | < ASS    : ":="     >
  | < EQEQ   : "=="     >
  | < EQ     : "="      >
  | < GT     : ">"      >
  | < GET    : ">="     >
  | < LT     : "<"      >
  | < LET    : "<="     >
  | < DEREF  : "!"      >
  | < NOT    : "~"      >
  | < NOTE   : "!="     >
  | < SEMI   : ";"      >
  | < LBRACK : "{"      >
  | < RBRACK : "}"      >
  | < DOT    : "."      >
  | < NUM    : (["0"-"9"])+ >
  | < BOOL   : ("true" | "false") >
  | < TYPE   : ("int" | "bool" | "ref" | "rec" | "function") >
  | < ID     : ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])* >
}

ASTNode Prog():
{
  ASTNode t;
}
{
  t = Exp() <EL>
  {
    return t;
  }
}

ASTNode Exp():
{
  Token op;
  ASTNode t1, t2;
}
{
  t1 = Term() ( ( op = <PLUS> | op = <MINUS> ) t2 = Term()
      {
        if (op.kind == PLUS)
          t1 = new ASTPlus(t1, t2);
        else
          t1 = new ASTSub(t1, t2);
      })*
  {
    return t1;
  }
}

ASTNode Term():
{
  Token op;
  ASTNode t1, t2;
}
{
  t1 = SFact() ( ( op = <TIMES> | op = <DIV> ) t2 = SFact()
  {
    if (op.kind == TIMES)
      t1 = new ASTMul(t1, t2);
    else
      t1 = new ASTDiv(t1, t2);
  })*
  {
    return t1;
  }
}

ASTNode SFact():
{
  Token op;
  ASTNode t1, t2;
}
{
  t1 = Fact() ( t1 = CFact(t1) )?
  {
    return t1;
  }
}

ASTNode Fact():
{
  Token n, t;
  ASTNode t1, t2;
  Vector<Binding> ve;
  Vector<String> vs, vt;
}
{
  ( n = <NUM>  { t1 = new ASTNum(Integer.parseInt(n.image)); }
  | n = <ID>   { t1 = new ASTId(n.image); }
  | <DECL> { ve = new Vector<Binding>(); }
      ( n = <ID> <EQ> t1 = Exp() { ve.addElement(new Binding(n.image, t1)); } )*
    <IN>
      t2 = Exp()
    <END> { t1 = new ASTDecl(ve, t2); }
  | <FUN> { vs = new Vector<String>(); vt = new Vector<String>(); }
      (
        ( n = <ID><COL> t = <TYPE> { vs.addElement(n.image); vt.addElement(t.image); } )
        ( <COMM> n = <ID><COL> t = <TYPE> { vs.addElement(n.image); vt.addElement(t.image); } )*
      )?
    <EQ><GT>
      t2 = Exp()
    <END> { t1 = new ASTFun(vs, vt, t2); }
  | <LBRACK>
    { ve = new Vector<Binding>(); }
      (
        ( n = <ID> <EQ> t1 = Exp() { ve.addElement(new Binding(n.image, t1)); } )
        ( <COMM> n = <ID> <EQ> t1 = Exp() { ve.addElement(new Binding(n.image, t1)); } )*
      )?
    <RBRACK> { t1 = new ASTRecord(ve); }
  )
  {
    return t1;
  }
}

ASTNode CFact(ASTNode s):
{
  Token op;
  ASTNode t1, t2;
  Vector<ASTNode> v;
}
{
  ( <LPAR> { v = new Vector<ASTNode>(); }
    (
      ( t2 = Exp() { v.addElement(t2); } )
      ( <COMM> t2 = Exp() { v.addElement(t2); } )*
    )?
    <RPAR> { t1 = new ASTCall(v, s); }
  | <DOT> t1 = SFact() { t1 = new ASTGetRec(t1, s); }
  )
  {
    return t1;
  }
}
